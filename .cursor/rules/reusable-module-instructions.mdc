---
description: 
globs: 
alwaysApply: true
---
재사용 가능한 코드(Utilities) 관리 지침

1. 임시 코드 → 공용 코드로 승격 (Promotion)
- 실험 폴더(experiments/exp_XX/) 내에서 작성된 임시 스크립트 중, 다른 실험이나 프로젝트에서도 유용하게 쓸 수 있는 부분이 확인되면, 실험 종료 시점 혹은 적절한 시점에 공용 폴더(src/, scripts/)로 옮기고 범용적으로 리팩토링한다.
- 예:
    experiments/exp_05_strategy_test/backtest.py에서 작성한 백테스팅 로직 → src/backtest_utils.py
    함수형으로 변환, 모듈화, 예외처리 강화 후, 팀 전원이 재사용할 수 있게 함.
2. 브랜치 Merge 프로세스
- 새로운 유틸 코드를 이동 및 리팩토링할 때, 별도 Pull Request(또는 Merge Request)를 생성.
- PR 본문에 “공용 유틸 코드 승격” 목적과 “기능 상세”를 적고, 리뷰를 통해 API 설계나 범용성 여부를 함께 점검한다.
- Merge 이후, 해당 코드는 누구나 import 해서 쓸 수 있는 “공용 자산”이 됨.

3. 모듈/라이브러리화 고려
- 프로젝트가 커지고 공유 코드가 늘어나면, setup.py나 pyproject.toml을 사용해 내부 파이썬 패키지로 관리 가능.
- 배포 및 버전 관리를 지원하기 위해, 버전 태깅(예: mylib v0.1, v0.2 등)을 적용하면, 어떤 실험이 어느 버전을 사용했는지 4.추적하기 쉬워진다.

4. 공용 폴더 vs. 실험 폴더 구분
- experiments/exp_XX/ 폴더는 해당 실험에만 특화된 임시 코드, 빠른 프로토타이핑, 결과물(스크립트, 모델) 저장을 위한 곳이다.
- src/(또는 scripts/) 폴더는 팀 전체에서 쓸 만한 안정적이고 재사용성 높은 코드만 보관한다.
- 실험 중 개발된 코드를 “승격”할 때, 함수·클래스명, 주석, 에러 처리 등을 범용적으로 개선하여 옮긴다.

5. 코드 중복 최소화 & 유지보수성
- 공용 코드로 승격된 함수가 생기면, 기존 실험에서도 동일 로직 복붙을 지양하고, 공용 함수를 불러써서 일관성을 유지한다.
- 새로운 개선이나 버그 수정 시, 공용 코드만 고치면 모든 실험이 자동으로 개선된 로직을 적용 받는다.

6. 기타
- 실험에서만 쓰이다가 폐기될 코드라면, experiments/ 내에 남겨두고 굳이 승격하지 않아도 됨.
- 불필요하게 공용 코드가 많아져도 복잡도가 증가하므로, 실제 재사용 빈도와 가치가 충분한지 판단하여 승격 여부를 결정한다.